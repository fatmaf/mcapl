GWENDOLEN


:name: agent

:Initial Beliefs: 
location(l0)
location(l1)
location(l2)
location(l3)
location(l4)
location(l5)



plan_annotations(fullplan,[
                plan_annotation(fullplan,1,[at(l1),avoid(l3)]),
                plan_annotation(fullplan,
                                2,[at(l1)])
                ])
	
plans(fullplan, [
	plan(fullplan,1,[move_to(l1)]),
	plan(fullplan,2,[move_to(l2),move_to(l3),move_to(l4),move_to(l5),move_to(l1)])
	 ])

specification([at(l1),at(l2),avoid(l3)])




:Reasoning Rules:

ismember(H, [H | T]);
ismember(H, [X | T]) :-
	ismember(H,T);
	
get_plans_for_spec(S,[],[]);

get_plans_for_spec(S, [plan_annotation(X,Ind,HP) | TP], [plan_annotation(X,Ind,HP) | Res]) :-
	ismember(S,HP),
	get_plans_for_spec(S,TP,Res);  
	
get_plans_for_spec(S,[plan_annotation(X,Ind,HP) | TP], Res) :-
	get_plans_for_spec(S,TP,Res);
	
check_plans_for_spec(L,[],L);
check_plans_for_spec(L,NL,NL);

get_plans_for_spec(S,L,PlanSet) :-
	get_plans_for_spec(S,L,Res),
	check_plans_for_spec(L,Res,PlanSet);


get_plans_for_speclist([],Plans,Plans);	
 
get_plans_for_speclist([H|T],Plans,PossiblePlans):-
	get_plans_for_spec(H,Plans,PlanSet),
	check_plans_for_spec(Plans,PlanSet,NewPlanSet),
	get_plans_for_speclist(T,NewPlanSet,PossiblePlans);


	
get_plans_for_speclist(PlanSet):-
	specification(S),
	plan_annotations(_,L),
	get_plans_for_speclist(S,L,PlanSet);
	


get_first_plan_index_for_speclist(Index):-
	get_plans_for_speclist([plan_annotation(_,Index,_) | _]);
	

plan(PlanType,Id,Ind,Plan) :- plans(PlanType,L), ismember(plan(PlanType,Id,Plan),L);


:Initial Goals:

satisfy_spec [achieve]


:Plans:

+!satisfy_spec [achieve] : 
	{ B specification(S), 
	  B plan_annotations(X,L), 
	  B get_plans_for_speclist(S,L,PlanSet), B get_first_plan_index_for_speclist(Index)
	  } <- 
				print("The planset is "),
				print(PlanSet),
				print("The index is"),
				print(Index),
				+!achieve_plan(X,Index,0)[achieve];
			
				
+!achieve_plan(PlanType,PlanId,IndInPlan) [achieve] : {B plan(PlanType,PlanId,IndInPlan,[])} <-
													 +achieve_plan(PlanType,PlanId,IndInPlan),
													  +satisfy_spec;

+!achieve_plan(PlanType,PlanId,IndInPlan) [achieve] : {B plan(PlanType,PlanId,IndInPlan,[move_to(X) | T])} <- 
													move_to(X), sum(IndInPlan,1,Z), 
													+plan(PlanType,PlanId,Z,T), 
													+achieve_plan(PlanType,PlanId,IndInPlan),
													+!achieve_plan(PlanType,PlanId,Z)[achieve];
													
+!achieve_plan(PlanType,PlanId,IndInPlan) [achieve] : {B plan(PlanType,PlanId,IndInPlan,[print(X) | T])} <- 
													print(X), sum(IndInPlan,1,Z), 
													+plan(PlanType,PlanId,Z,T), 
													+achieve_plan(PlanType,PlanId,IndInPlan),
													+!achieve_plan(PlanType,PlanId,Z)[achieve];


+at(X) : {True} <- print("at"), print(X);



