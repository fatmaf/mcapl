GWENDOLEN

// in this part we test 
// plan execution 
// we test our ability to 
// execute a plan completely 
// stop after x indices 
// stop on percept 


:name: planexecutorA

:Initial Beliefs:

//just to count the locations
location_count(0)

//to record movement
move_history([])

//plans
//plans(Goal/destination, [
//				plan(source, index, actions, annotations )...])

plans(visit(l1),[ 
        plan(at(l0),1, [move_to(l1)], [at(l1),before(l1,l3),before(l1,l5),before(l3,l5), avoid(l6)]),
        plan(at(l0),2, [move_to(l2), move_to(l1)], [at(l1),before(l1,l3),before(l1,l5),before(l3,l5), avoid(l6)]),
        plan(at(l0),3, [move_to(l2), move_to(l3), move_to(l4), move_to(l5), move_to(l1)], [at(l1), before(l3,l5), avoid(l6)])
    ])
    
                
plans(visit(l3),[ 
        plan(at(l1),1, [ move_to(l4), move_to(l5), move_to(l3)],[at(l3), at(l5), before(l1,l3), before(l1,l5), before(l3,l5),avoid(l6)]),
        plan(at(l1),2, [move_to(l2), move_to(l3)], [at(l3), before(l1,l3), before(l1,l5), before(l3,l5), avoid(l6)])
    ])

plans(visit(l5),[ 
        plan(at(l3),1, [move_to(l4), move_to(l5)], [at(l5), before(l1,l3),before(l3,l5) ,before(l1,l5), avoid(l6)]),
        plan(at(l3),2, [move_to(l2), move_to(l1), move_to(l5)], [at(l5), before(l1,l3),before(l1,l5),before(l3,l5), avoid(l6)])
    ])


:Reasoning Rules:
//the basics
ismember(H, [H | T]);
ismember(H, [X | T]) :-
	ismember(H,T);
	
append([], X, X);
append([ H | T], X , [ H | W ]) :- 
	append(T,X,W);

remove_from_list(Elem,[],[]);
remove_from_list(Elem,[Elem|L],L);
remove_from_list(Elem,[NotElem | L],[NotElem | NL]):-
	remove_from_list(Elem,L,NL);

remove_list_from_list([],L,L);	
remove_list_from_list([ToRemoveH | ToRemoveT ],L,NL):-
	remove_from_list(ToRemoveH,L,NL1),
	remove_list_from_list(ToRemoveT,NL1,NL); 


replaceFirst(_,_, [],[]);
replaceFirst(O,R,[O|T],[R|T]);
replaceFirst(O,R,[H|T],[H|T2]) :- 
			dif(H,O),
			replaceFirst(O,R,T,T2);

//finding a plan 
plan_exists(CurrentLoc,Goal,PlanIndex,PlanActions,
			PlanAnnots,[plan(CurrentLoc,PlanIndex,PlanActions,PlanAnnots) | T]);


plan_exists(CurrentLoc,Goal,PlanIndex,PlanActions,PlanAnnots,[H | T]):-
	plan_exists(CurrentLoc,Goal,PlanIndex,PlanActions,PlanAnnots,T);
	
plan_exists(Goal,Source,PlanIndex,PlanActions,PlanAnnots):-
	plans(Goal,L),
	plan_exists(Source,Goal,PlanIndex,PlanActions,PlanAnnots,L);



:Initial Goals:

achieve_plan(visit(l1),at(l0),3)[achieve]

:Plans:

+!achieve_plan(Goal,Source,Index)[achieve]: {~B current_plan(Goal,Index,PlanActions),
											  B plan_exists(Goal,Source,Index,Actions,Annots)
											} 
									<-
									+current_plan(Goal,Index,Actions),
									+.lock,
									+!reset_move_history[perform],
									+!update_move_history[perform],
									-.lock,
									+!printPlan(Goal,Source,Index,Actions,Annots)[perform],
									+!doActions[perform];


+!achieve_plan(Goal,Source,Index)[achieve]: {B current_plan(Goal,Index,[])
											} 
									<-
									
									+achieve_plan(Goal,Source,Index),
									+!update_move_history[perform],
									+!appendPrint("Achieved Plan for ",Goal)[perform];
									
+!achieve_plan(Goal,Source,Index)[achieve]: {B current_plan(Goal,Index,PlanActions)
											} 
									<-
									+!update_move_history[perform],
									+!doActions[perform];

+!doActions[perform]: {B current_plan(Goal,Index,[FirstAction|ActionsTail])}
					<-
					+!doAction(FirstAction)[perform],
					-current_plan(Goal,Index,[FirstAction|ActionsTail]),
					+current_plan(Goal,Index,ActionsTail)
					;
					
+!doAction(move_to(Loc))[perform]: {~B moving}
							<- 
							+moving,
							move_to(Loc);
							
+!doneMove(Loc)[perform]: {B moving}
							<-
							+doAction(move_to(Loc)),
							-moving;

+!reset_move_history[perform]: {B move_history(MH)} <- -move_history(MH),+move_history([]);														
+!update_move_history[perform] : {~B at(Loc), B move_history(MH)} 
							<- 
							print("isnt anywhere");
							
+!update_move_history[perform] : {B at(Loc), B move_history(MH)} 
							<- 
							+!visitedLoc(Loc)[perform],
							+!printMH("Before update ")[perform],
							-move_history(MH),
							+move_history([move_to(Loc) | MH]),
							+!printMH("After update ")[perform];
							
									
+at(Loc): {True} <- 
			+.lock,
			+!visitedLoc(Loc)[perform],
			+!doneMove(Loc)[perform],
			+!appendPrint("Visited ",Loc)[perform],
			-.lock;			
			
						
+!visitedLoc(Loc)[perform] : {B location_count(C), ~B visited(Loc,C)}
						<-
						+visited(Loc,C),
						-location_count(C),
						sum(C,1,NewC),
						+location_count(NewC);
						
+!printMH(PrefixText)[perform] : {B move_history(MH)} 
							<-
							append(PrefixText," MH ", Text),	
							+!appendPrint(Text,MH)[perform];						
+!appendPrint(PString,PVar)[perform] : {True} <- 
							 +.lock,
							 toString(PVar,PVarS),
							 append(PString,PVarS,PrintV),
							print(PrintV),
							-.lock;
							
+!printPlan(Goal,Source,PlanIndex,PlanActions,PlanAnnots)[perform]: {True} <-
	+.lock,
	toString(Goal,PG),
	toString(PlanIndex,PIS),
					toString(PlanActions,PAS),
					toString(PlanAnnots,PAnS),
					toString(Source,SrcS),
					append(" Index ",PIS,P1),
					append(" Actions ",PAS,P2),
					append(" Annotations ",PAnS, P3), 
					append(" Source ", SrcS,P4),
					
					append(P1,P2,PP1),
					append(PP1,P3,PP2),
					append(PG," ",PPG),
					append(PPG,P4,PP4),
					append(PP4,PP2,PP3),
					print(PP3),
					-.lock;						
									
									
									
									