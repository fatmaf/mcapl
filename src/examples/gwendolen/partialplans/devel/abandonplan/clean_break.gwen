GWENDOLEN


:name: agent

:Initial Beliefs: 
location(l0)
location(l1)
location(l2)
location(l3)
location(l4)
location(l5)
location(l6)

location_count(0)


move_history([])

//plans
plans(visit(l1),[ 
        plan(at(l0),1, [move_to(l1)], [at(l1),before(l1,l3),before(l1,l5),before(l3,l5), avoid(l6)]),
        plan(at(l0),2, [move_to(l2), move_to(l1)], [at(l1),before(l1,l3),before(l1,l5),before(l3,l5), avoid(l6)]),
        plan(at(l0),3, [move_to(l2), move_to(l3), move_to(l4), move_to(l5), move_to(l1)], [at(l1), before(l3,l5), avoid(l6)])
    ])
    
                
plans(visit(l3),[ 
        plan(at(l1),1, [ move_to(l4), move_to(l5), move_to(l3)],[at(l3), at(l5), before(l1,l3), before(l1,l5), before(l3,l5),avoid(l6)]),
        plan(at(l1),2, [move_to(l2), move_to(l3)], [at(l3), before(l1,l3), before(l1,l5), before(l3,l5), avoid(l6)])
    ])

plans(visit(l5),[ 
        plan(at(l3),1, [move_to(l4), move_to(l5)], [at(l5), before(l1,l3),before(l3,l5) ,before(l1,l5), avoid(l6)]),
        plan(at(l3),2, [move_to(l2), move_to(l1), move_to(l5)], [at(l5), before(l1,l3),before(l1,l5),before(l3,l5), avoid(l6)])
    ])
    
required_specification([at(l3)])
preferred_specification([before(l1,l3),before(l1,l5),before(l3,l5),avoid(l5)])

:Reasoning Rules:
//the basics
ismember(H, [H | T]);
ismember(H, [X | T]) :-
	ismember(H,T);
	
append([], X, X);
append([ H | T], X , [ H | W ]) :- 
	append(T,X,W);

remove_from_list(Elem,[],[]);
remove_from_list(Elem,[Elem|L],L);
remove_from_list(Elem,[NotElem | L],[NotElem | NL]):-
	remove_from_list(Elem,L,NL);

remove_list_from_list([],L,L);	
remove_list_from_list([ToRemoveH | ToRemoveT ],L,NL):-
	remove_from_list(ToRemoveH,L,NL1),
	remove_list_from_list(ToRemoveT,NL1,NL); 


replaceFirst(_,_, [],[]);
replaceFirst(O,R,[O|T],[R|T]);
replaceFirst(O,R,[H|T],[H|T2]) :- 
			dif(H,O),
			replaceFirst(O,R,T,T2);

//finding a plan 
plan_exists(CurrentLoc,Goal,PlanIndex,PlanActions,PlanAnnots,[plan(CurrentLoc,PlanIndex,PlanActions,PlanAnnots) | T]);


plan_exists(CurrentLoc,Goal,PlanIndex,PlanActions,PlanAnnots,[H | T]):-
	plan_exists(CurrentLoc,Goal,PlanIndex,PlanActions,PlanAnnots,T);
	
plan_exists(CurrentLoc,Goal,PlanIndex,PlanActions,PlanAnnots):-
	plans(Goal,L),
	plan_exists(CurrentLoc,Goal,PlanIndex,PlanActions,PlanAnnots,L);


		
//update annotations 
update_annotations(Goal,PlanIndex,ViolatedSpecs,OldPlans,NewPlans):-
	plans(Goal,OldPlans),
	// get the plan to change 
	plan_exists(Source,Goal,PlanIndex,PlanActions,PlanAnnots),
	// update its annotations 
	remove_list_from_list(ViolatedSpecs,PlanAnnots,NewPlanAnnots),
	//now replace this new plan with the old plan 
	replaceFirst(plan(Source,PlanIndex,PlanActions,PlanAnnots),plan(Source,PlanIndex,PlanActions,NewPlanAnnots),OldPlans,NewPlans);
	


		

//checking if percept violates spec
violated(Percept,avoid(Percept));

violated(Percept,before(Percept,X)):-
	visited(X,Tx),
	~visited(Percept,Tp);
	
violated(Percept,before(X,Percept)):-
	~visited(X,Tx);

//getting list of violated specs	
specifications_violated(NearPercept,[],[]);

specifications_violated(NearPercept,[HSpec | TSpec],[HSpec | Res]):-
	violated(NearPercept,HSpec),
	specifications_violated(NearPercept,TSpec,Res);

specifications_violated(NearPercept,[HSpec | TSpec], Res):-
	specifications_violated(NearPercept,TSpec,Res);	

full_spec_list(FSL):-
	required_specification(RS),
	preferred_specification(PS),
	append(RS,PS,FSL);

current_spec_list(CSL):-
	full_spec_list(CSL);
			
:Initial Goals:
//goals

visit(l3)[achieve]


:Plans:


//find the plan

+!visit(X)[achieve]: {B at(Y), B plan_exists(at(Y),visit(X),PlanIndex,PlanActions,PlanAnnots), B move_history(MH)} <- 
					print("Plan found"),
					+current_plan(visit(X),PlanIndex),
					-move_history(MH),
					+move_history([move_to(Y)]),
					+!printPlan(visit(X),PlanIndex,PlanActions,PlanAnnots)[perform],
					+current_plan_actions(PlanActions),
					+!performActions[achieve]; 
	
	
+!visit(X)[achieve]: {B at(Y), ~B plan_exists(at(Y),visit(X),PlanIndex,PlanActions,PlanAnnots)} <- 
					print("No plan found"),
					+visit(X); 				 


//achieve the plan 
+!performActions[achieve]: {B current_plan(Goal,PI), ~B moving_back, B current_plan_actions([])} <-
				+.lock,
				-current_plan_actions([]),
				+performActions,
				print("All actions performed"), 
				-current_plan(Goal,PI),
				+visit(Goal),
				-.lock;
				
+!performActions[achieve]: {B current_plan(Goal,PI), B moving_back, B move_history([])} <-
				+.lock,
				+performActions,
				print("All actions performed"), 
				-current_plan(Goal,PI),
				-moving_back,
				-.lock;
				
+!performActions[achieve]: {B current_plan(Goal,PI), ~B moving_back, B current_plan_actions([move_to(Loc)|T])} <- 
				+.lock,
				+!appendPrint("Moving to ",Loc)[perform],
				move_to(Loc),
				+!updateMH(move_to(Loc))[perform],
				-current_plan_actions([move_to(Loc)|T]),
				+current_plan_actions(T),
				-.lock;
				
+!performActions[achieve]: {B current_plan(Goal,PI), B moving_back, B move_history([move_to(Loc)|T])} <- 
				+.lock,
				+!appendPrint("Moving back to ",Loc)[perform],
				move_to(Loc),
				-move_history([move_to(Loc)|T]),
				+move_history(T),
				-.lock;

+!updateMH(Move)[perform] : {B move_history(MH)} <- 
							+.lock,
							+!appendPrint("Move history ",MH)[perform],
							+!appendPrint("Adding current move ",Move)[perform],
							-move_history(MH),
							+move_history([Move | MH]),
							+!appendPrint("Updated Move history ",[Move | MH])[perform],
							-.lock;
//percept things 
+at(X): {B location_count(LC)} <-
								+.lock,
								sum(LC,1,NewLC),
								-location_count(LC),
								+visited(X,NewLC),
								+location_count(NewLC),
								+!appendPrint("At ",X)[perform],
								-.lock;
								
								
+near(X): {B current_spec_list(FSL), B specifications_violated(X,FSL,SVL)} <- 
								+!appendPrint("Near ",X)[perform],
								+!appendPrint("Specifications violated ",SVL)[perform],
								+!updatePlan(SVL)[perform];
+!updatePlan([])[perform] : {B current_plan(Goal,PlanInd), ~B moving_back}	 <- 
							+!appendPrint("Updating plan for ",Goal)[perform],
							+!appendPrint("Index ",PlanInd)[perform],
							+!appendPrint("No update required ",SVL)[perform];

+!updatePlan(SVL)[perform] : {B current_plan(Goal,PlanInd), ~B moving_back }	 <- 
							+.lock,
							+!appendPrint("Updating plan for ",Goal)[perform],
							+!appendPrint("Index ",PlanInd)[perform],
							+!appendPrint("Specs violated ",SVL)[perform],
							+!updateAnnotations(Goal,PlanInd,SVL)[perform],
							-current_plan(Goal,PlanInd),
							-!performActions(T)[achieve],
							-.lock,
							+!move_back[perform];	
														
+!updatePlan([])[perform] : {B current_plan(Goal,PlanInd), B moving_back}	 <- 
							print("Moving back so we dont care");

+!updatePlan(SVL)[perform] : {B current_plan(Goal,PlanInd), B moving_back}	 <- 
							print("Moving back so we dont care");

+!updateAnnotations(Goal,PlanInd,SVL)[perform]:
							{B update_annotations(Goal,PlanInd,SVL,OldPlans,NewPlans)} <-
							-plans(Goal,OldPlans),
							+plans(Goal,NewPlans);
												
+!move_back[perform] : {B move_history(MH)} <- 

						+current_plan("MoveBack",1),
						+moving_back,
						-move_history(MH),
						+!performActions(MH)[perform];
																											
//print actions							
+!appendPrint(PString,PVar)[perform] : {True} <- 
							 +.lock,
							 toString(PVar,PVarS),
							 append(PString,PVarS,PrintV),
							print(PrintV),
							-.lock;
							
+!printPlan(Goal,PlanIndex,PlanActions,PlanAnnots)[perform]: {True} <-
	+.lock,
	toString(Goal,PG),
	toString(PlanIndex,PIS),
					toString(PlanActions,PAS),
					toString(PlanAnnots,PAnS),
					append(" Index ",PIS,P1),
					append(" Actions ",PAS,P2),
					append(" Annotations ",PAnS, P3), 
					append(P1,P2,PP1),
					append(PP1,P3,PP2),
					append(PG," ",PPG),
					append(PPG,PP2,PP3),
					print(PP3),
					-.lock;