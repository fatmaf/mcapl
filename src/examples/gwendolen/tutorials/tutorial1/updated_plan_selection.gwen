GWENDOLEN


:name: agent

:Initial Beliefs: 
location(l0)
location(l1)
location(l2)
location(l3)
location(l4)
location(l5)


plan_annotations(fullplan,[
	
	plan_annotation(fullplan,2,[at(l1),at(l2),at(l4),before(l2,l4),before(l1,l4)]),
	plan_annotation(fullplan,1,[at(l1),at(l2),at(l4),before(l1,l2),before(l1,l4)])
	])
	
plans(fullplan, [
	plan(fullplan,1,[move_to(l1),move_to(l2),move_to(l3),move_to(l4)]),
	plan(fullplan,2,[move_to(l2),move_to(l1),move_to(l5),move_to(l4)]) ])

specification([at(l1),at(l2),at(l4),before(l1,l2),before(l1,l4),before(l2,l4)])


:Reasoning Rules:

ismember(H, [H | T]);
ismember(H, [X | T]) :-
	ismember(H,T);
	
get_plans_for_spec(S,[],[]);

get_plans_for_spec(S, [plan_annotation(X,Ind,HP) | TP], [plan_annotation(X,Ind,HP) | Res]) :-
	ismember(S,HP),
	get_plans_for_spec(S,TP,Res);  
	
get_plans_for_spec(S,[plan_annotation(X,Ind,HP) | TP], Res) :-
	get_plans_for_spec(S,TP,Res);
	
check_plans_for_spec(L,[],L);
check_plans_for_spec(L,NL,NL);

get_plans_for_spec(S,L,PlanSet) :-
	get_plans_for_spec(S,L,Res),
	check_plans_for_spec(L,Res,PlanSet);


get_plans_for_speclist([],Plans,Plans);	
 
get_plans_for_speclist([H|T],Plans,PossiblePlans):-
	get_plans_for_spec(H,Plans,PlanSet),
	check_plans_for_spec(Plans,PlanSet,NewPlanSet),
	get_plans_for_speclist(T,NewPlanSet,PossiblePlans);


	
get_plans_for_speclist(PlanSet):-
	specification(S),
	plan_annotations(_,L),
	get_plans_for_speclist(S,L,PlanSet);
	

get_first_plan_index_for_speclist(Index):-
	get_plans_for_speclist([plan_annotation(_,Index,_) | _]);
	

plan(Id,Ind,Plan) :- plans(fullplan,L), ismember(plan(fullplan,Id,Plan),L);


:Initial Goals:

satisfy_spec [achieve]


:Plans:

+!satisfy_spec [achieve] : 
	{ B specification(S), 
	  B plan_annotations(X,L), 
	  B get_plans_for_spec(at(l1),L,PlanSet) 
	  } <- 
				print("The planset is "),
				print(PlanSet),
				+satisfy_spec;
			
				
+!achieve_plan(Id,Ind) [achieve] : {B plan(Id,Ind,[])} <- +achieve_plan(Id,Ind), +satisfy_spec;

+!achieve_plan(Id,Ind) [achieve] : {B plan(Id,Ind,[move_to(X) | T])} <- move_to(X), sum(Ind,1,Z), +plan(Id,Z,T), +achieve_plan(Id,Ind),+!achieve_plan(Id,Z)[achieve];
+!achieve_plan(Id,Ind) [achieve] : {B plan(Id,Ind,[print(X) | T])} <- print(X), sum(Ind,1,Z), +plan(Id,Z,T), +achieve_plan(Id,Ind),+!achieve_plan(Id,Z)[achieve];


+at(X) : {True} <- print("at"), print(X);



