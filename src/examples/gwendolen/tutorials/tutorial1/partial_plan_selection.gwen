GWENDOLEN


:name: agent

:Initial Beliefs: 
location(l0)
location(l1)
location(l2)
location(l3)
location(l4)
location(l5)



plan_annotations(at(l1),[
                plan_annotation(at(l1),1, [at(l1),before(l1,l3),before(l1,l5),before(l3,l5)]),
                plan_annotation(at(l1),2, [at(l1), before(l1,l3), before(l1,l5), before(l3,l5)]),
                plan_annotation(at(l1),3, [at(l1), before(l3,l5)])
                ])
                
plans(at(l1),[ 
        plan(at(l1),1, [move_to(l1)]),
        plan(at(l1),2, [move_to(l2), move_to(l1)]),
        plan(at(l1),3, [move_to(l2), move_to(l3), move_to(l4), move_to(l5), move_to(l1)])
    ])
    
    
plan_annotations(at(l3),[
                plan_annotation(at(l3),1, [at(l3), at(l5), before(l1,l3), before(l1,l5)]),
                plan_annotation(at(l3),2, [at(l3), before(l1,l3), before(l1,l5), before(l3,l5)])
                ])
                
plans(at(l3),[ 
        plan(at(l3),1, [move_to(l5), move_to(l4), move_to(l3)]),
        plan(at(l3),2, [move_to(l2), move_to(l3)])
    ])
    
plan_annotations(at(l5), [
                plan_annotation(at(l5),1, [at(l5), before(l1,l3),before(l3,l5) ,before(l1,l5) ]),
                plan_annotation(at(l5),2, [at(l5), before(l1,l3),before(l1,l5),before(l3,l5)])
    ])
    
plans(at(l5),[ 
        plan(at(l5),1, [move_to(l4), move_to(l5)]),
        plan(at(l5),2, [move_to(l2), move_to(l1), move_to(l5)])
    ])
    
specification([at(l1),at(l3),at(l5), before(l1,l3), before(l1,l5), before(l3,l5)])


:Reasoning Rules:

ismember(H, [H | T]);
ismember(H, [X | T]) :-
	ismember(H,T);
	
get_plans_for_spec(S,[],[]);

get_plans_for_spec(S, [plan_annotation(X,Ind,HP) | TP], [plan_annotation(X,Ind,HP) | Res]) :-
	ismember(S,HP),
	get_plans_for_spec(S,TP,Res);  
	
get_plans_for_spec(S,[plan_annotation(X,Ind,HP) | TP], Res) :-
	get_plans_for_spec(S,TP,Res);
	
check_plans_for_spec(L,[],L);
check_plans_for_spec(L,NL,NL);

get_plans_for_spec(S,L,PlanSet) :-
	get_plans_for_spec(S,L,Res),
	check_plans_for_spec(L,Res,PlanSet);


get_plans_for_speclist([],Plans,Plans);	
 
get_plans_for_speclist([H|T],Plans,PossiblePlans):-
	get_plans_for_spec(H,Plans,PlanSet),
	check_plans_for_spec(Plans,PlanSet,NewPlanSet),
	get_plans_for_speclist(T,NewPlanSet,PossiblePlans);


	
get_plans_for_speclist(PlanSet):-
	specification(S),
	plan_annotations(_,L),
	get_plans_for_speclist(S,L,PlanSet);
	


get_first_plan_index_for_speclist(Index):-
	get_plans_for_speclist([plan_annotation(_,Index,_) | _]);
	

plan(PlanType,Id,Ind,Plan) :- plans(PlanType,L), ismember(plan(PlanType,Id,Plan),L);


get_plans_for_partialspec([],[]);

get_plans_for_partialspec([H|T],PlanSet):-
	plan_annotations(H,L),
	get_plans_for_speclist([H|T],L,PlanSet);
	
get_plans_for_partialspec([H|T],PlanSet):-
	get_plans_for_partialspec(T,PlanSet);


	
get_first_plan_index_for_partialspec(S,X,Index):-
	get_plans_for_partialspec(S,[plan_annotation(X,Index,Plan) | TP]);


can_remove_at(X):- visited(X);
can_remove_before(X1,X2):- (visited(X1),~visited(X2));

get_updated_spec([],[]).

get_updated_spec([at(X)|T],Res):-
	can_remove_at(X),
	get_updated_spec(T,Res);
	
get_updated_spec([before(X1,X2) | T], Res):-
	can_remove_before(X1,X2),
	get_updated_spec(T,Res);

get_updated_spec([H |T], [H | Res]):-
	get_updated_spec(T,Res);
	
get_updated_spec(US):-
	specification(S),
	get_updated_spec(S,US);

:Initial Goals:

satisfy_spec [achieve]


:Plans:

+!satisfy_spec [achieve] : 
	{
	B specification(S),
	B get_first_plan_index_for_partialspec(S,X,Index)
	  } <- 

				print(Index),
				print("The plan label is"),
				print(X),
				+!achieve_plan(X,Index,0)[achieve];
			
% so when we have achieved a plan, then we update the spec, i.e. remove old spec belief, add new spec belief and add in the new plan 
% we have satisfied the spec when the updated spec we get is empty 
		
+!achieve_plan(PlanType,PlanId,IndInPlan) [achieve] : {B plan(PlanType,PlanId,IndInPlan,[])} <-
													 +achieve_plan(PlanType,PlanId,IndInPlan),
													  +satisfy_spec;

+!achieve_plan(PlanType,PlanId,IndInPlan) [achieve] : {B plan(PlanType,PlanId,IndInPlan,[move_to(X) | T])} <- 
													move_to(X), sum(IndInPlan,1,Z), 
													+plan(PlanType,PlanId,Z,T), 
													+achieve_plan(PlanType,PlanId,IndInPlan),
													+!achieve_plan(PlanType,PlanId,Z)[achieve];
													
+!achieve_plan(PlanType,PlanId,IndInPlan) [achieve] : {B plan(PlanType,PlanId,IndInPlan,[print(X) | T])} <- 
													print(X), sum(IndInPlan,1,Z), 
													+plan(PlanType,PlanId,Z,T), 
													+achieve_plan(PlanType,PlanId,IndInPlan),
													+!achieve_plan(PlanType,PlanId,Z)[achieve];


+at(X) : {True} <- +visited(X),print("at"), print(X);



